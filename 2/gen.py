#!/usr/bin/env python3

# vim:set ts=2 sts=2 sw=2 et ai fdm=marker:

from __future__ import division, print_function

import sys
import functools as ft
import itertools as it
import multiprocessing

@ft.lru_cache(maxsize=None)
def f_x(x, y, c, type):
  val = [
      (c) & 1,  # ['1--']
      (x) & 1,  # ['-1']
      (y) & 1,  # ['1-']
      (~x) & 1,  # ['-0']
      (~y) & 1,  # ['-0-']
      (x & c) & 1,  # ['1-1']
      (x & y) & 1,  # ['-11']
      (x | y) & 1,  # ['-1', '1-']
      (y & c) & 1,  # ['11-']
      (x & ~y) & 1,  # ['-01']
      (x | ~y) & 1,  # ['-1', '0-']
      (~x & c) & 1,  # ['1-0']
      (~x & y) & 1,  # ['-10']
      (~x | y) & 1,  # ['-0', '1-']
      (~y & c) & 1,  # ['10-']
      ((x ^ c)) & 1,  # ['^-^']
      ((x ^ y)) & 1,  # ['^^']
      ((y ^ c)) & 1,  # ['^^-']
      (~x & ~y) & 1,  # ['-00']
      ((~x ^ ~c)) & 1,  # ['~-~']
      ((~x ^ ~y)) & 1,  # ['~~']
      ((~y ^ ~c)) & 1,  # ['~~-']
      ((x ^ c) & y) & 1,  # ['^1^']
      ((x ^ y ^ c)) & 1,  # ['^^^']
      ((x ^ y) & c) & 1,  # ['1^^']
      ((y ^ c) & x) & 1,  # ['^^1']
      ((x ^ c) & ~y) & 1,  # ['^0^']
      ((y ^ c) & ~x) & 1,  # ['^^0']
      (~x | (x ^ y)) & 1,  # ['-0', '^^']
      ((~x ^ ~c) & y) & 1,  # ['~1~']
      ((~x ^ ~y) & c) & 1,  # ['1~~']
      ((~y ^ ~c) & x) & 1,  # ['~~1']
      (x & c | y & c) & 1,  # ['1-1', '11-']
      (x & y | x & c) & 1,  # ['-11', '1-1']
      (x & y | y & c) & 1,  # ['-11', '11-']
      ((~x ^ ~c) & ~y) & 1,  # ['~0~']
      ((~x ^ ~y ^ ~c)) & 1,  # ['~~~']
      ((~y ^ ~c) & ~x) & 1,  # ['~~0']
      (x & c | ~y & c) & 1,  # ['1-1', '10-']
      (x & y | x & ~c) & 1,  # ['-11', '0-1']
      (x & y | y & ~c) & 1,  # ['-11', '01-']
      (x & y | ~x & c) & 1,  # ['-11', '1-0']
      (x & y | ~y & c) & 1,  # ['-11', '10-']
      (x & ~c | y & c) & 1,  # ['0-1', '11-']
      (x & ~y | x & c) & 1,  # ['-01', '1-1']
      (x & ~y | y & c) & 1,  # ['-01', '11-']
      (y & ~c | x & c) & 1,  # ['01-', '1-1']
      (~x & c | y & c) & 1,  # ['1-0', '11-']
      (~x & y | x & c) & 1,  # ['-10', '1-1']
      (~x & y | y & c) & 1,  # ['-10', '11-']
      (x & y | ~x & ~c) & 1,  # ['-11', '0-0']
      (x & y | ~y & ~c) & 1,  # ['-11', '00-']
      (x & ~c | ~y & c) & 1,  # ['0-1', '10-']
      (x & ~y | ~x & c) & 1,  # ['-01', '1-0']
      (x & ~y | ~y & c) & 1,  # ['-01', '10-']
      (~x & y | ~x & c) & 1,  # ['-10', '1-0']
      (~x & ~c | y & c) & 1,  # ['0-0', '11-']
      (~x & ~y | x & c) & 1,  # ['-00', '1-1']
      (~x & ~y | y & c) & 1,  # ['-00', '11-']
      (~y & ~c | x & c) & 1,  # ['00-', '1-1']
      (x & ~y | ~x & ~c) & 1,  # ['-01', '0-0']
      (x & ~y | ~y & ~c) & 1,  # ['-01', '00-']
      (~x & y | ~x & ~c) & 1,  # ['-10', '0-0']
      (~x & ~y | x & ~c) & 1,  # ['-00', '0-1']
      (~x & ~y | y & ~c) & 1,  # ['-00', '01-']
      (~x & ~y | ~x & c) & 1,  # ['-00', '1-0']
      (~x & ~y | ~y & c) & 1,  # ['-00', '10-']
      ((x ^ y) & ~c | x & c) & 1,  # ['0^^', '1-1']
      ((x ^ y) & ~c | y & c) & 1,  # ['0^^', '11-']
      (x & c | (y ^ c) & ~x) & 1,  # ['1-1', '^^0']
      (x & y | (x ^ c) & ~y) & 1,  # ['-11', '^0^']
      (x & y | (y ^ c) & ~x) & 1,  # ['-11', '^^0']
      (x & ~c | (x ^ c) & y) & 1,  # ['0-1', '^1^']
      (x & ~c | (y ^ c) & x) & 1,  # ['0-1', '^^1']
      (x & ~y | (x ^ c) & y) & 1,  # ['-01', '^1^']
      (x & ~y | (x ^ y) & c) & 1,  # ['-01', '1^^']
      (y & c | (x ^ c) & ~y) & 1,  # ['11-', '^0^']
      (y & ~c | (y ^ c) & x) & 1,  # ['01-', '^^1']
      (~x & c | (x ^ c) & y) & 1,  # ['1-0', '^1^']
      (~x & c | (x ^ y) & c) & 1,  # ['1-0', '1^^']
      (~x & y | (x ^ c) & y) & 1,  # ['-10', '^1^']
      (~x & y | (x ^ y) & c) & 1,  # ['-10', '1^^']
      (~y & c | (y ^ c) & x) & 1,  # ['10-', '^^1']
      ((x ^ y) & ~c | ~x & c) & 1,  # ['0^^', '1-0']
      ((x ^ y) & ~c | ~y & c) & 1,  # ['0^^', '10-']
      (x & c | (~x ^ ~c) & y) & 1,  # ['1-1', '~1~']
      (x & y | (~x ^ ~y) & c) & 1,  # ['-11', '1~~']
      (x & y | x & c | y & c) & 1,  # ['-11', '1-1', '11-']
      (x & ~c | (x ^ c) & ~y) & 1,  # ['0-1', '^0^']
      (x & ~c | (y ^ c) & ~x) & 1,  # ['0-1', '^^0']
      (x & ~y | (x ^ y) & ~c) & 1,  # ['-01', '0^^']
      (y & c | (~y ^ ~c) & x) & 1,  # ['11-', '~~1']
      (y & ~c | (y ^ c) & ~x) & 1,  # ['01-', '^^0']
      (~x & c | (x ^ c) & ~y) & 1,  # ['1-0', '^0^']
      (~x & y | (x ^ y) & ~c) & 1,  # ['-10', '0^^']
      (~x & ~c | (x ^ c) & y) & 1,  # ['0-0', '^1^']
      (~x & ~c | (x ^ y) & c) & 1,  # ['0-0', '1^^']
      (~x & ~c | (y ^ c) & x) & 1,  # ['0-0', '^^1']
      (~x & ~y | (x ^ c) & y) & 1,  # ['-00', '^1^']
      (~x & ~y | (x ^ y) & c) & 1,  # ['-00', '1^^']
      (~x & ~y | (y ^ c) & x) & 1,  # ['-00', '^^1']
      (~y & c | (y ^ c) & ~x) & 1,  # ['10-', '^^0']
      (~y & ~c | (x ^ c) & y) & 1,  # ['00-', '^1^']
      (~y & ~c | (x ^ y) & c) & 1,  # ['00-', '1^^']
      (~y & ~c | (y ^ c) & x) & 1,  # ['00-', '^^1']
      ((~x ^ ~y) & ~c | x & c) & 1,  # ['0~~', '1-1']
      (x & c | (~x ^ ~c) & ~y) & 1,  # ['1-1', '~0~']
      (x & c | (~y ^ ~c) & ~x) & 1,  # ['1-1', '~~0']
      (x & y | (~x ^ ~y) & ~c) & 1,  # ['-11', '0~~']
      (x & y | (~y ^ ~c) & ~x) & 1,  # ['-11', '~~0']
      (y & c | (~y ^ ~c) & ~x) & 1,  # ['11-', '~~0']
      (~x & ~y | (x ^ c) & ~y) & 1,  # ['-00', '^0^']
      (~x & ~y | (y ^ c) & ~x) & 1,  # ['-00', '^^0']
      (x & y | x & ~c | y & ~c) & 1,  # ['-11', '0-1', '01-']
      (x & ~y | x & c | ~y & c) & 1,  # ['-01', '1-1', '10-']
      (~x & y | ~x & c | y & c) & 1,  # ['-10', '1-0', '11-']
      (~x & ~c | (~x ^ ~c) & y) & 1,  # ['0-0', '~1~']
      (~x & ~c | (~y ^ ~c) & x) & 1,  # ['0-0', '~~1']
      (~x & ~y | (~x ^ ~y) & c) & 1,  # ['-00', '1~~']
      (~x & ~y | (~y ^ ~c) & x) & 1,  # ['-00', '~~1']
      (~y & ~c | (~y ^ ~c) & x) & 1,  # ['00-', '~~1']
      (x & y & ~c | ~x & ~y & c) & 1,  # ['011', '100']
      (x & ~y & ~c | ~x & y & c) & 1,  # ['001', '110']
      (~x & y & ~c | x & ~y & c) & 1,  # ['010', '101']
      (~x & ~c | (~x ^ ~c) & ~y) & 1,  # ['0-0', '~0~']
      (~x & ~y & ~c | x & y & c) & 1,  # ['000', '111']
      (~x & ~y | (~x ^ ~y) & ~c) & 1,  # ['-00', '0~~']
      (~y & ~c | (~y ^ ~c) & ~x) & 1,  # ['00-', '~~0']
      ((x ^ c) & y | (y ^ c) & x) & 1,  # ['^1^', '^^1']
      ((x ^ y) & ~c | (y ^ c) & ~x) & 1,  # ['0^^', '^^0']
      ((x ^ c) & y | (~y ^ ~c) & ~x) & 1,  # ['^1^', '~~0']
      ((x ^ c) & ~y | (~y ^ ~c) & x) & 1,  # ['^0^', '~~1']
      ((x ^ y) & c | (~y ^ ~c) & ~x) & 1,  # ['1^^', '~~0']
      ((x ^ y) & ~c | (~y ^ ~c) & x) & 1,  # ['0^^', '~~1']
      ((~x ^ ~y) & c | (y ^ c) & ~x) & 1,  # ['1~~', '^^0']
      ((~x ^ ~y) & ~c | (y ^ c) & x) & 1,  # ['0~~', '^^1']
      (x & ~c | y & ~c | (x ^ c) & y) & 1,  # ['0-1', '01-', '^1^']
      (x & ~c | y & ~c | (y ^ c) & x) & 1,  # ['0-1', '01-', '^^1']
      (~x & y | ~x & c | (x ^ c) & y) & 1,  # ['-10', '1-0', '^1^']
      (~x & y | ~x & c | (x ^ y) & c) & 1,  # ['-10', '1-0', '1^^']
      (~x & y | ~x & ~c | (x ^ y) & ~c) & 1,  # ['-10', '0-0', '0^^']
      (~x & ~y | ~x & c | (x ^ c) & ~y) & 1,  # ['-00', '1-0', '^0^']
      (~x & ~y | ~y & c | (y ^ c) & ~x) & 1,  # ['-00', '10-', '^^0']
      (~x & c | (x ^ y) & c | (x ^ c) & y) & 1,  # ['1-0', '1^^', '^1^']
      (~x & y | (x ^ y) & c | (x ^ c) & y) & 1,  # ['-10', '1^^', '^1^']
      (~x & ~y | (x ^ c) & ~y | (y ^ c) & ~x) & 1,  # ['-00', '^0^', '^^0']
      (~x & ~y | (~x ^ ~y) & c | (y ^ c) & ~x) & 1,  # ['-00', '1~~', '^^0']
  ][type]
  return val & 1

@ft.lru_cache(maxsize=None)
def f_c(x, y, c, type):
  val = [
      (c) & 1,  # ['1--']
      (x) & 1,  # ['-1']
      (y) & 1,  # ['1-']
      (~x) & 1,  # ['-0']
      (~y) & 1,  # ['-0-']
      (x & c) & 1,  # ['1-1']
      (x & y) & 1,  # ['-11']
      (x | y) & 1,  # ['-1', '1-']
      (y & c) & 1,  # ['11-']
      (x & ~y) & 1,  # ['-01']
      (x | ~y) & 1,  # ['-1', '0-']
      (~x & c) & 1,  # ['1-0']
      (~x & y) & 1,  # ['-10']
      (~x | y) & 1,  # ['-0', '1-']
      (~y & c) & 1,  # ['10-']
      ((x ^ c)) & 1,  # ['^-^']
      ((x ^ y)) & 1,  # ['^^']
      ((y ^ c)) & 1,  # ['^^-']
      (~x & ~y) & 1,  # ['-00']
      ((~x ^ ~c)) & 1,  # ['~-~']
      ((~x ^ ~y)) & 1,  # ['~~']
      ((~y ^ ~c)) & 1,  # ['~~-']
      ((x ^ c) & y) & 1,  # ['^1^']
      ((x ^ y ^ c)) & 1,  # ['^^^']
      ((x ^ y) & c) & 1,  # ['1^^']
      ((y ^ c) & x) & 1,  # ['^^1']
      ((x ^ c) & ~y) & 1,  # ['^0^']
      ((y ^ c) & ~x) & 1,  # ['^^0']
      (~x | (x ^ y)) & 1,  # ['-0', '^^']
      ((~x ^ ~c) & y) & 1,  # ['~1~']
      ((~x ^ ~y) & c) & 1,  # ['1~~']
      ((~y ^ ~c) & x) & 1,  # ['~~1']
      (x & c | y & c) & 1,  # ['1-1', '11-']
      (x & y | x & c) & 1,  # ['-11', '1-1']
      (x & y | y & c) & 1,  # ['-11', '11-']
      ((~x ^ ~c) & ~y) & 1,  # ['~0~']
      ((~x ^ ~y ^ ~c)) & 1,  # ['~~~']
      ((~y ^ ~c) & ~x) & 1,  # ['~~0']
      (x & c | ~y & c) & 1,  # ['1-1', '10-']
      (x & y | x & ~c) & 1,  # ['-11', '0-1']
      (x & y | y & ~c) & 1,  # ['-11', '01-']
      (x & y | ~x & c) & 1,  # ['-11', '1-0']
      (x & y | ~y & c) & 1,  # ['-11', '10-']
      (x & ~c | y & c) & 1,  # ['0-1', '11-']
      (x & ~y | x & c) & 1,  # ['-01', '1-1']
      (x & ~y | y & c) & 1,  # ['-01', '11-']
      (y & ~c | x & c) & 1,  # ['01-', '1-1']
      (~x & c | y & c) & 1,  # ['1-0', '11-']
      (~x & y | x & c) & 1,  # ['-10', '1-1']
      (~x & y | y & c) & 1,  # ['-10', '11-']
      (x & y | ~x & ~c) & 1,  # ['-11', '0-0']
      (x & y | ~y & ~c) & 1,  # ['-11', '00-']
      (x & ~c | ~y & c) & 1,  # ['0-1', '10-']
      (x & ~y | ~x & c) & 1,  # ['-01', '1-0']
      (x & ~y | ~y & c) & 1,  # ['-01', '10-']
      (~x & y | ~x & c) & 1,  # ['-10', '1-0']
      (~x & ~c | y & c) & 1,  # ['0-0', '11-']
      (~x & ~y | x & c) & 1,  # ['-00', '1-1']
      (~x & ~y | y & c) & 1,  # ['-00', '11-']
      (~y & ~c | x & c) & 1,  # ['00-', '1-1']
      (x & ~y | ~x & ~c) & 1,  # ['-01', '0-0']
      (x & ~y | ~y & ~c) & 1,  # ['-01', '00-']
      (~x & y | ~x & ~c) & 1,  # ['-10', '0-0']
      (~x & ~y | x & ~c) & 1,  # ['-00', '0-1']
      (~x & ~y | y & ~c) & 1,  # ['-00', '01-']
      (~x & ~y | ~x & c) & 1,  # ['-00', '1-0']
      (~x & ~y | ~y & c) & 1,  # ['-00', '10-']
      ((x ^ y) & ~c | x & c) & 1,  # ['0^^', '1-1']
      ((x ^ y) & ~c | y & c) & 1,  # ['0^^', '11-']
      (x & c | (y ^ c) & ~x) & 1,  # ['1-1', '^^0']
      (x & y | (x ^ c) & ~y) & 1,  # ['-11', '^0^']
      (x & y | (y ^ c) & ~x) & 1,  # ['-11', '^^0']
      (x & ~c | (x ^ c) & y) & 1,  # ['0-1', '^1^']
      (x & ~c | (y ^ c) & x) & 1,  # ['0-1', '^^1']
      (x & ~y | (x ^ c) & y) & 1,  # ['-01', '^1^']
      (x & ~y | (x ^ y) & c) & 1,  # ['-01', '1^^']
      (y & c | (x ^ c) & ~y) & 1,  # ['11-', '^0^']
      (y & ~c | (y ^ c) & x) & 1,  # ['01-', '^^1']
      (~x & c | (x ^ c) & y) & 1,  # ['1-0', '^1^']
      (~x & c | (x ^ y) & c) & 1,  # ['1-0', '1^^']
      (~x & y | (x ^ c) & y) & 1,  # ['-10', '^1^']
      (~x & y | (x ^ y) & c) & 1,  # ['-10', '1^^']
      (~y & c | (y ^ c) & x) & 1,  # ['10-', '^^1']
      ((x ^ y) & ~c | ~x & c) & 1,  # ['0^^', '1-0']
      ((x ^ y) & ~c | ~y & c) & 1,  # ['0^^', '10-']
      (x & c | (~x ^ ~c) & y) & 1,  # ['1-1', '~1~']
      (x & y | (~x ^ ~y) & c) & 1,  # ['-11', '1~~']
      (x & y | x & c | y & c) & 1,  # ['-11', '1-1', '11-']
      (x & ~c | (x ^ c) & ~y) & 1,  # ['0-1', '^0^']
      (x & ~c | (y ^ c) & ~x) & 1,  # ['0-1', '^^0']
      (x & ~y | (x ^ y) & ~c) & 1,  # ['-01', '0^^']
      (y & c | (~y ^ ~c) & x) & 1,  # ['11-', '~~1']
      (y & ~c | (y ^ c) & ~x) & 1,  # ['01-', '^^0']
      (~x & c | (x ^ c) & ~y) & 1,  # ['1-0', '^0^']
      (~x & y | (x ^ y) & ~c) & 1,  # ['-10', '0^^']
      (~x & ~c | (x ^ c) & y) & 1,  # ['0-0', '^1^']
      (~x & ~c | (x ^ y) & c) & 1,  # ['0-0', '1^^']
      (~x & ~c | (y ^ c) & x) & 1,  # ['0-0', '^^1']
      (~x & ~y | (x ^ c) & y) & 1,  # ['-00', '^1^']
      (~x & ~y | (x ^ y) & c) & 1,  # ['-00', '1^^']
      (~x & ~y | (y ^ c) & x) & 1,  # ['-00', '^^1']
      (~y & c | (y ^ c) & ~x) & 1,  # ['10-', '^^0']
      (~y & ~c | (x ^ c) & y) & 1,  # ['00-', '^1^']
      (~y & ~c | (x ^ y) & c) & 1,  # ['00-', '1^^']
      (~y & ~c | (y ^ c) & x) & 1,  # ['00-', '^^1']
      ((~x ^ ~y) & ~c | x & c) & 1,  # ['0~~', '1-1']
      (x & c | (~x ^ ~c) & ~y) & 1,  # ['1-1', '~0~']
      (x & c | (~y ^ ~c) & ~x) & 1,  # ['1-1', '~~0']
      (x & y | (~x ^ ~y) & ~c) & 1,  # ['-11', '0~~']
      (x & y | (~y ^ ~c) & ~x) & 1,  # ['-11', '~~0']
      (y & c | (~y ^ ~c) & ~x) & 1,  # ['11-', '~~0']
      (~x & ~y | (x ^ c) & ~y) & 1,  # ['-00', '^0^']
      (~x & ~y | (y ^ c) & ~x) & 1,  # ['-00', '^^0']
      (x & y | x & ~c | y & ~c) & 1,  # ['-11', '0-1', '01-']
      (x & ~y | x & c | ~y & c) & 1,  # ['-01', '1-1', '10-']
      (~x & y | ~x & c | y & c) & 1,  # ['-10', '1-0', '11-']
      (~x & ~c | (~x ^ ~c) & y) & 1,  # ['0-0', '~1~']
      (~x & ~c | (~y ^ ~c) & x) & 1,  # ['0-0', '~~1']
      (~x & ~y | (~x ^ ~y) & c) & 1,  # ['-00', '1~~']
      (~x & ~y | (~y ^ ~c) & x) & 1,  # ['-00', '~~1']
      (~y & ~c | (~y ^ ~c) & x) & 1,  # ['00-', '~~1']
      (x & y & ~c | ~x & ~y & c) & 1,  # ['011', '100']
      (x & ~y & ~c | ~x & y & c) & 1,  # ['001', '110']
      (~x & y & ~c | x & ~y & c) & 1,  # ['010', '101']
      (~x & ~c | (~x ^ ~c) & ~y) & 1,  # ['0-0', '~0~']
      (~x & ~y & ~c | x & y & c) & 1,  # ['000', '111']
      (~x & ~y | (~x ^ ~y) & ~c) & 1,  # ['-00', '0~~']
      (~y & ~c | (~y ^ ~c) & ~x) & 1,  # ['00-', '~~0']
      ((x ^ c) & y | (y ^ c) & x) & 1,  # ['^1^', '^^1']
      ((x ^ y) & ~c | (y ^ c) & ~x) & 1,  # ['0^^', '^^0']
      ((x ^ c) & y | (~y ^ ~c) & ~x) & 1,  # ['^1^', '~~0']
      ((x ^ c) & ~y | (~y ^ ~c) & x) & 1,  # ['^0^', '~~1']
      ((x ^ y) & c | (~y ^ ~c) & ~x) & 1,  # ['1^^', '~~0']
      ((x ^ y) & ~c | (~y ^ ~c) & x) & 1,  # ['0^^', '~~1']
      ((~x ^ ~y) & c | (y ^ c) & ~x) & 1,  # ['1~~', '^^0']
      ((~x ^ ~y) & ~c | (y ^ c) & x) & 1,  # ['0~~', '^^1']
      (x & ~c | y & ~c | (x ^ c) & y) & 1,  # ['0-1', '01-', '^1^']
      (x & ~c | y & ~c | (y ^ c) & x) & 1,  # ['0-1', '01-', '^^1']
      (~x & y | ~x & c | (x ^ c) & y) & 1,  # ['-10', '1-0', '^1^']
      (~x & y | ~x & c | (x ^ y) & c) & 1,  # ['-10', '1-0', '1^^']
      (~x & y | ~x & ~c | (x ^ y) & ~c) & 1,  # ['-10', '0-0', '0^^']
      (~x & ~y | ~x & c | (x ^ c) & ~y) & 1,  # ['-00', '1-0', '^0^']
      (~x & ~y | ~y & c | (y ^ c) & ~x) & 1,  # ['-00', '10-', '^^0']
      (~x & c | (x ^ y) & c | (x ^ c) & y) & 1,  # ['1-0', '1^^', '^1^']
      (~x & y | (x ^ y) & c | (x ^ c) & y) & 1,  # ['-10', '1^^', '^1^']
      (~x & ~y | (x ^ c) & ~y | (y ^ c) & ~x) & 1,  # ['-00', '^0^', '^^0']
      (~x & ~y | (~x ^ ~y) & c | (y ^ c) & ~x) & 1,  # ['-00', '1~~', '^^0']
  ][type]
  return val & 1

@ft.lru_cache()
def awc(x, y, c, b=2):

  # .. uh, this is awc-c?
  #t = divmod(x + y + c, b)
  #return (b - 1 - t[0], t[1])

  # returns full period for 2^16+2^n-1!
  #return ((~x & ~c | (x ^ c) & ~y) & 1, x ^ y ^ c)

  return divmod(x + y + c, b)
  # l = [0, 0, 0, 0, 0, 0, 0, 0]

  # # popcount, essentially
  # l[0b000] = (0, 0)
  # l[0b001] = l[0b010] = l[0b100] = (0, 1)
  # l[0b011] = l[0b101] = l[0b110] = (1, 0)
  # l[0b111] = (1, 1)
  # return l[x << 2 | y << 1 | c]


@ft.lru_cache()
def awcc(x, y, c, b=2):
  #return divmod(2 * b - 1 - x - y - c, b)
  #return divmod(-x - y - c - 1, b)
  tx = (2 * b) - 1 - x - y - c
  tc = x + y + c
  return (tc // b, tx % b)


@ft.lru_cache()
def sbb1(x, y, c, b=2):
  #return divmod(x - y - c, b)
  tx = x - y - c
  return (0 if tx >= 0 else 1, tx % b)


@ft.lru_cache()
def sbb2(x, y, c, b=2):
  #return divmod(y - x - c, b)
  tx = y - x - c
  return (0 if tx >= 0 else 1, tx % b)


def gen(s, b=2, r=8, xtype=-1, ctype=-1):
  Q = [0 for _ in range(r)]

  if s >= r:
    return

  Q[0] = 0
  c = 1

  R = 0
  S = r - s

  #f = [awc, awcc, sbb1, sbb2][g]

  while True:
    yield Q[R]

    #print('{} {} {} {} {} {}'.format(g, Q[S], Q[R], c, *f(Q[S], Q[R], c)))

    #(c, Q[R]) = f(Q[S], Q[R], c)
    (c, Q[R]) = (
        f_c(Q[S], Q[R], c, type=ctype),
        f_x(Q[S], Q[R], c, type=xtype))

    R += 1
    S += 1
    if R >= r:
      R = 0
    if S >= r:
      S = 0


#def worker(r=2, a=1, gtype=0):
def worker(args):
  s = args['s'] # short lag
  r = args['r']
  xtype = args['xtype']
  ctype = args['ctype']

  f = gen(s=s, r=r, b=2, xtype=xtype, ctype=ctype)
  g = gen(s=s, r=r, b=2, xtype=xtype, ctype=ctype)

  f_period = 0
  g_period = 0
  while True:
    try:
      x = next(f)
      y = next(g)
      y = next(g)
      f_period += 1
      g_period += 2

      if x != y:
        continue

      # till f reaches g
      delta = g_period - f_period - r - r
      buf = ""
      while x == y and delta < g_period:
        x = next(f)
        y = next(g)
        delta += 1

      if delta == g_period:
        #return (gtype, r, a, f_period)
        return {'xtype':xtype,
            'ctype':ctype,
            'r':r,
            's':s,
            'period': f_period}
    except StopIteration:
      return None


if __name__ == '__main__':

  p = multiprocessing.Pool(processes=3)
  r = int(sys.argv[1])
  max_period = 0
  for result in p.imap_unordered(
      worker,
      tuple({
          'r': r,
          's': s,
          'xtype': xtype,
          'ctype': ctype
      } for s in range(1, r)
      for xtype in [23,36] #range(147)
      for ctype in range(147)
      )):

    #r = eval(result)
    # if result['period'] > max_period:
    #   print(result)
    #   max_period = result['period']
    print(result, ',')
